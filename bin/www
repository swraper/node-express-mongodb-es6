#!/usr/bin/env node

/**
 * Module dependencies.
 */

// var app = require('../app');
import app from '../app';
import http from 'http';
import mongoose from 'mongoose';
const debug = require('debug')('node-express:server');
import os from 'os';

/*
* Get mongodb bay mongoose.
*/
const db = mongoose.connect("mongodb://localhost:27017/nodedb", { useNewUrlParser: true }, () => {
    console.log('Now mongodb listening on mongodb://localhost:27017/nodedb')
});

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
const host = getLocalIP() || '127.0.0.1';

app.set('host', host);
app.set('port', port);

/*
* Get IP from localhost
*/
function getLocalIP() {
    const object = os.networkInterfaces();
    let localhost;
    for (const key in object) {
        object[key].forEach((item)=>{
            if (item.family == 'IPv4' && item.address !='127.0.0.1') {
                localhost = item.address;
            }
        })
    }
    return localhost;
}

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('.')
    console.log('.')
    console.log('.')
    console.log('Now nodeJs listening on http://' + host + ':' + port)
    debug('Listening on ' + bind);
}
